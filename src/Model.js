import * as THREE from 'three'
import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Environment, useGLTF, useDetectGPU, Html } from '@react-three/drei'
import { useSpring } from '@react-spring/core'
import { a as three } from '@react-spring/three'
import { a as web } from '@react-spring/web'

const vec = new THREE.Vector3()

export default function Model({ open, hinge, ...props }) {
  const group = useRef()
  const GPUTier = useDetectGPU()

  const { nodes, materials } = useGLTF('/mac-draco.glb')
  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false)
  const [intro, setIntro] = useState(false)
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
  // Make it float in the air when it's opened
  const openProps = useSpring({ open: Number(intro) })

  useEffect(() => {
    open &&
      setTimeout(() => {
        setIntro(true)
      }, 1000)
  }, [open])

  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    state.camera.position.lerp(vec.set(0 + open ? 0 : state.mouse.x, intro ? (GPUTier.isMobile ? 0.8 : 2) : 0, intro ? -7 : -25), 0.08)

    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? 0.45 : Math.cos(t / 2) / 10 + 0.1, 0.08)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? 0 : Math.sin(t / 4) / 10, 0.08)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? 0 : Math.sin(t / 4) / 20, 0.08)
    // group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, (-2 + Math.sin(t)) / 3, 0.05)
  })
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group
      position={[0, -1.5, 0]}
      scale={GPUTier.isMobile ? [0.8, 0.8, 0.8] : [1.2, 1.2, 1.2]}
      ref={group}
      {...props}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}>
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh material-color="#fff" geometry={nodes['Cube008_2'].geometry}>
            {open && (
              <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
                <div className="wrapper">
                  <web.img style={{ transform: openProps.open.to([0, 1], ['scale(1)', 'scale(0.4)']) }} width={200} src="/WRAP-Logo.svg" />
                </div>
              </Html>
            )}
          </mesh>
        </group>
      </three.group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}
